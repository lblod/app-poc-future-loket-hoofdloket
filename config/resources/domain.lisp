(in-package :mu-cl-resources)

(setf *include-count-in-paginated-responses* t)
(setf *supply-cache-headers-p* t)
(setf sparql:*experimental-no-application-graph-for-sudo-select-queries* t)
(setf *cache-model-properties-p* t)

;; reading in the domain.json
(read-domain-file "users.lisp")

(define-resource concept-scheme ()
  :class (s-prefix "skos:ConceptScheme")
  :properties `((:label :string ,(s-prefix "skos:prefLabel")))
  :has-many `((concept :via ,(s-prefix "skos:inScheme")
                       :inverse t
                       :as "concepts")
              (concept :via ,(s-prefix "skos:topConceptOf")
                       :inverse t
                       :as "top-concepts"))
  :resource-base (s-url "http://lblod.data.gift/concept-schemes/")
  :features `(include-uri)
  :on-path "concept-schemes"
)

(define-resource concept ()
  :class (s-prefix "skos:Concept")
  :properties `((:label :string ,(s-prefix "skos:prefLabel")))
  :has-many `((concept-scheme :via ,(s-prefix "skos:inScheme")
                              :as "concept-schemes")
              (concept-scheme :via ,(s-prefix "skos:topConceptOf")
                              :as "top-concept-schemes")
              (concept :via ,(s-prefix "skos:narrower")
                       :as "narrower")
              (concept :via ,(s-prefix "skos:narrower")
                       :inverse t
                       :as "broader"))
  :resource-base (s-url "http://lblod.data.gift/concepts/")
  :features `(include-uri)
  :on-path "concepts"
  )

(define-resource public-service ()
  :class (s-prefix "ipdc:InstancePublicServiceSnapshot")
  :properties `((:name :language-string-set ,(s-prefix "dct:title"))
                (:description :language-string-set ,(s-prefix "dct:description"))
                (:additional-description :language-string-set ,(s-prefix "ipdc:additionalDescription"))
                (:keyword :language-string-set ,(s-prefix "dcat:keyword"))
                (:regulations :language-string-set ,(s-prefix "ipdc:regulation"))
                (:exceptions :language-string-set ,(s-prefix "ipdc:exception"))
                (:start-date :datetime ,(s-prefix "schema:startDate"))
                (:end-date :datetime ,(s-prefix "schema:endDate"))
                (:is-archived :boolean ,(s-prefix "ipdc:isArchived"))
                (:date-created :datetime ,(s-prefix "schema:dateCreated"))
                (:date-modified :datetime ,(s-prefix "schema:dateModified"))
                (:product-id :string ,(s-prefix "schema:productID"))
                (:concept :url ,(s-prefix "dct:source")))
  :has-one `((concept :via ,(s-prefix "dct:type")
               :as "type")
              (concept :via ,(s-prefix "m8g:hasCompetentAuthority")
                :as "competent-authority"))
  :has-many `((concept :via ,(s-prefix "dct:language")
                :as "language")
               (concept :via ,(s-prefix "ipdc:targetAudience")
                 :as "target-audiences")
               (concept :via ,(s-prefix "m8g:thematicArea")
                 :as "thematic-areas")
               ;; (location :via ,(s-prefix "dct:spatial")
               ;;   :as "spatial")
               (concept :via ,(s-prefix "ipdc:competentAuthorityLevel")
                 :as "competent-authority-levels")
               (concept :via ,(s-prefix "ipdc:executingAuthorityLevel")
                 :as "executing-authority-levels")
               (website :via ,(s-prefix "rdfs:seeAlso")
                 :as "websites"))
  :resource-base (s-url "http://data.lblod.info/id/public-service/")
  :features '(include-uri)
  :on-path "public-services"
  )

(define-resource website ()
  :class (s-prefix "schema:WebSite")
  :properties `((:title :language-string-set ,(s-prefix "dct:title"))
                 (:description :language-string-set ,(s-prefix "dct:description"))
                 (:url :string ,(s-prefix "schema:url")))
  :has-one `((public-service :via ,(s-prefix "rdfs:seeAlso")
               :inverse t
               :as "public-service"))
  :resource-base (s-url "http://lblod.data.gift/websites/")
  :on-path "websites")
